echo = FALSE  # Avoid the warning message of library and versions
library(ggplot2)
library(plyr)
wd <- setwd("D:/cpinilla/personal/DataScientific/Reproducible_Research/Assessment2")
if ( !"stormData.csv.bz2" %in% dir()){
print("Let me download the file")
download.file("http://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2", destfile = "stormData.csv.bz2")}
if (!"StormData" %in% ls()){
print("Loading the data")
StormData <- read.csv("stormData.csv.bz2")}
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|storm|wnd|hurricane|typhoon|torn|spout|funnel|whirlwind",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|avalanche|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas|high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
View(StormData)
Variables.used <- c("BGN_DATE", "EVTYPE","GROUP.EVENT", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
StormData <- StormData[, Variables.used]
Variables.used <- c("BGN_DATE", "EVTYPE","GROUP.EVENT", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
StormData <- StormData[, Variables.used]
Colum.Fatal <- which(colnames(StormData) == "FATALITIES")
Fatal.sum <- aggregate(StormData[, Colum.Fatal], by = list(StormData$GROUP.EVENT), FUN = "sum")
Fatal.sum <- Fatal.sum[order(-Fatal.sum$x),]
graph <- ggplot(Fatal.sum,aes(Fatal.sum$Group.1,x))
graph + geom_bar(stat="identity") + ggtitle("Top 10 Event Types with max fatalities")
Colum.INJUR <- which(colnames(StormData) == "INJURIES")
INJUR.sum <- aggregate(StormData[, Colum.INJUR], by = list(StormData$GROUP.EVENT), FUN = "sum")
INJUR.sum <- INJUR.sum[order(-INJUR.sum$x),]
graph <- ggplot(INJUR.sum,aes(INJUR.sum$Group.1,x))
graph + geom_bar(stat="identity") + ggtitle("Top 10 Event Types with max INJURES")
graph + geom_bar(stat="identity") + ggtitle("Top 10 Event Types with max fatalities") + xlabel("Events")
StormData$PROPDMGEXP <- as.character(storm.damage$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(storm.damage$CROPDMGEXP)
# A function to convert K, M, B units in --EXP columns
Translate <- function(x){
x[x=="K"] <- "1000"
x[x=="k"] <- "1000"
x[x=="M"] <- "1000000"
x[x=="m"] <- "1000000"
x[x=="B"] <- "1000000000"
return(as.numeric(x))
}
StormData$PROPDMGEXP <- Translate(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- Translate(StormData$CROPDMGEXP)
StormData <- mutate(StormData, Sum.Damage=PROPDMG*PROPDMGEXP+CROPDMG*CROPDMGEXP)
View(StormData)
StormData <- read.csv("stormData.csv.bz2")}
StormData <- read.csv("stormData.csv.bz2")
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|storm|wnd|hurricane|typhoon|torn|spout|funnel|whirlwind",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|avalanche|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas|high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
Variables.used <- c("BGN_DATE", "EVTYPE","GROUP.EVENT", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
StormData <- StormData[, Variables.used]
StormData$PROPDMGEXP <- as.character(storm.damage$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(storm.damage$CROPDMGEXP)
StormData$PROPDMGEXP <- as.character(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(StormData$CROPDMGEXP)
StormData$PROPDMGEXP <- as.character(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(StormData$CROPDMGEXP)
# A function to convert K, M, B units in --EXP columns
Translate <- function(x){
x[x=="K"] <- "1000"
x[x=="k"] <- "1000"
x[x=="M"] <- "1000000"
x[x=="m"] <- "1000000"
x[x=="B"] <- "1000000000"
return(as.numeric(x))
}
StormData$PROPDMGEXP <- Translate(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- Translate(StormData$CROPDMGEXP)
StormData <- mutate(StormData, Sum.Damage=PROPDMG*PROPDMGEXP+CROPDMG*CROPDMGEXP)
View(StormData)
StormData <- read.csv("stormData.csv.bz2")
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|storm|wnd|hurricane|typhoon|torn|spout|funnel|whirlwind",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|avalanche|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas|high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
Variables.used <- c("BGN_DATE", "EVTYPE","GROUP.EVENT", "FATALITIES", "INJURIES", "PROPDMG", "PROPDMGEXP", "CROPDMG", "CROPDMGEXP")
StormData <- StormData[, Variables.used]
Colum.Fatal <- which(colnames(StormData) == "FATALITIES")
Fatal.sum <- aggregate(StormData[, Colum.Fatal], by = list(StormData$GROUP.EVENT), FUN = "sum")
Fatal.sum <- Fatal.sum[order(-Fatal.sum$x),]
#graph <- ggplot(Fatal.sum,aes(Fatal.sum$Group.1,x))
#graph + geom_bar(stat="identity") + ggtitle("Top 10 Event Types with max fatalities")
Colum.INJUR <- which(colnames(StormData) == "INJURIES")
INJUR.sum <- aggregate(StormData[, Colum.INJUR], by = list(StormData$GROUP.EVENT), FUN = "sum")
INJUR.sum <- INJUR.sum[order(-INJUR.sum$x),]
#graph <- ggplot(INJUR.sum,aes(INJUR.sum$Group.1,x))
#graph + geom_bar(stat="identity") + ggtitle("Top 10 Event Types with max INJURES")
View(StormData)
StormData$PROPDMGEXP <- as.character(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(StormData$CROPDMGEXP)
# A function to convert K, M, B units in --EXP columns
Translate <- function(x){
x[x==""]  <- "1"
x[x=="K"] <- "1000"
x[x=="k"] <- "1000"
x[x=="M"] <- "1000000"
x[x=="m"] <- "1000000"
x[x=="B"] <- "1000000000"
return(as.numeric(x))
}
StormData$PROPDMGEXP <- Translate(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- Translate(StormData$CROPDMGEXP)
StormData <- mutate(StormData, Sum.Damage=PROPDMG*PROPDMGEXP+CROPDMG*CROPDMGEXP)
View(StormData)
View(Fatal.sum)
Column.Fatal <- aggregate(FATALITIES ~ EVTYPE, data = Stormdata, FUN = sum)
Column.Fatal <- aggregate(FATALITIES ~ EVTYPE, data = StormData, FUN = sum)
Event.Causes <- head(arrange(Fatal.table, desc(FATALITIES)), n = 10)
Fatal.table <- aggregate(FATALITIES ~ EVTYPE, data = StormData, FUN = sum)
View(Fatal.table)
Event.Causes <- head(arrange(Fatal.table, desc(FATALITIES)), n = 10)
View(Event.Causes)
View(Fatal.table)
View(Event.Causes)
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|wnd|hurricane|typhoon|torn|spout|funnel",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|avalanche|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas |high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
StormData[grepl("Avalan|",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "AVALANCHE"
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|wnd|hurricane|typhoon|torn|spout|funnel",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump|aval",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|avalanche|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas |high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
Fatal.sum <- aggregate(FATALITIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Event.sum <- head(arrange(Fatal.sum, desc(FATALITIES)), n = 10)
View(Fatal.sum)
View(Event.sum)
View(Event.sum)
StormData[grepl("precipitation|rain|hail|drizzle|wet|percip|burst|depression|fog|wall cloud",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "PRECIPITATION"
StormData[grepl("wind|wnd|hurricane|typhoon|torn|spout|funnel",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "TORNADO"
StormData[grepl("slide|erosion|slump|aval",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "EROSION"
StormData[grepl("warmth|warm|heat|dry|hot|drought|hyperthermia|temperature record|record temperature|record high",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "HEAT"
StormData[grepl("cold|cool|ice|icy|frost|freeze|snow|winter|wintry|wintery|blizzard|chill|freezing|glaze|sleet|hypo",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "COLD"
StormData[grepl("floo|surf|blow-out|swells|fld|dam break",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FLOOD"
StormData[grepl("seas |high water|tide|tsunami|wave|current|marine|drowning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "SEAS"
StormData[grepl("dust|saharan",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "DUST"
StormData[grepl("tstm|thunderstorm|lightning",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "THUNDER"
StormData[grepl("fire|smoke|volcanic",StormData$EVTYPE, ignore.case = TRUE), "GROUP.EVENT"] <- "FIRE"
Fatal.sum <- aggregate(FATALITIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Fatal.table <- aggregate(FATALITIES ~ EVTYPE, data = StormData, FUN = sum)
Event.Causes <- head(arrange(Fatal.table, desc(FATALITIES)), n = 10)
Fatal.sum <- aggregate(FATALITIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Event.sum <- head(arrange(Fatal.sum, desc(FATALITIES)), n = 10)
View(Event.Causes)
View(Event.sum)
StormData$PROPDMGEXP <- as.character(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(StormData$CROPDMGEXP)
# A function to convert K, M, B units in --EXP columns
Translate <- function(x){
x[x==""]  <- "1"
x[x=="?"] <- "1"
x[x=="K"] <- "1000"
x[x=="k"] <- "1000"
x[x=="M"] <- "1000000"
x[x=="m"] <- "1000000"
x[x=="B"] <- "1000000000"
return(as.numeric(x))
}
StormData$PROPDMGEXP <- Translate(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- Translate(StormData$CROPDMGEXP)
StormData <- mutate(StormData, Sum.Damage=PROPDMG*PROPDMGEXP+CROPDMG*CROPDMGEXP)
Damage.Table <- aggregate(Sum.damage ~ GROUP.EVENT , data=StormData, FUN=sum)
Damage.Table <- aggregate(Sum.Damage ~ GROUP.EVENT , data=StormData, FUN=sum)
Damage.10 <- head(arrange(Damage.Table,desc(Sum.damage),n=10))
Damage.10 <- head(arrange(Damage.Table,desc(Sum.Damage),n=10))
Damage.10 <- head(arrange(Damage.Table,desc(Sum.Damage)),n=10)
View(Damage.10)
StormData$PROPDMGEXP <- as.character(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- as.character(StormData$CROPDMGEXP)
# A function to convert K, M, B units in --EXP columns
Translate <- function(x){
x[x==""]  <- "1"
x[x=="?"] <- "1"
x[x=="K"] <- "1000"
x[x=="k"] <- "1000"
x[x=="M"] <- "1000000"
x[x=="m"] <- "1000000"
x[x=="B"] <- "1000000000"
return(as.numeric(x))
}
StormData$PROPDMGEXP <- Translate(StormData$PROPDMGEXP)
StormData$CROPDMGEXP <- Translate(StormData$CROPDMGEXP)
StormData <- mutate(StormData, Sum.Damage=PROPDMG*PROPDMGEXP+CROPDMG*CROPDMGEXP)
StormData <- mutate(StormData, Prop.Damage=PROPDMG*PROPDMGEXP)
StormData <- mutate(StormData, Crop.Damage=CROPDMG*CROPDMGEXP)
Prop.Table <- aggregate(Prop.damage ~GROUP.EVENT, data=StormData, FUN = sum)
Prop.Table <- aggregate(Prop.Damage ~GROUP.EVENT, data=StormData, FUN = sum)
View(Prop.Table)
Prop.10 <- head(arrange(Prop.Table,desc(Prop.Damage)),n=10)
View(Prop.10)
Crop.Table <- aggregate(Crop.Damage ~GROUP.EVENT, data=StormData, FUN = sum)
Crop.10 <- head(arrange(Crop.Table,desc(Crop.Damage)),n=10)
Damage.Table <- aggregate(Sum.Damage ~ GROUP.EVENT , data=StormData, FUN=sum)
Damage.10 <- head(arrange(Damage.Table,desc(Sum.Damage)),n=10)
Injur.Table <- aggregate(INJURIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Injur.10 <- head(arrange(Injur.Table, desc(INJURIES)), n = 10)
par(mfrow = c(1, 2), mar = c(10, 4, 0.5, 2.5), oma = c(1.5, 2, 1, 1))
barplot(Fatal.10$FATALITIES, names.arg = Fatal.10$GROUP.EVENT, ylab = "Fatalities", las = 3)
barplot(Injur.10$INJURUES, names.arg = Injur.10$GROUP.EVENT, ylab = "INJURIES", las = 3)
title(main = "Impacts of weather events on population health", outer = TRUE)
Fatal.10 <- head(arrange(Fatal.Table, desc(FATALITIES)), n = 10)
Fatal.Table <- aggregate(FATALITIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Fatal.10 <- head(arrange(Fatal.Table, desc(FATALITIES)), n = 10)
Injur.Table <- aggregate(INJURIES ~ GROUP.EVENT, data = StormData, FUN = sum)
Injur.10 <- head(arrange(Injur.Table, desc(INJURIES)), n = 10)
par(mfrow = c(1, 2), mar = c(10, 4, 0.5, 2.5), oma = c(1.5, 2, 1, 1))
barplot(Fatal.10$FATALITIES, names.arg = Fatal.10$GROUP.EVENT, ylab = "Fatalities", las = 3)
barplot(Injur.10$INJURUES, names.arg = Injur.10$GROUP.EVENT, ylab = "INJURIES", las = 3)
title(main = "Impacts of weather events on population health", outer = TRUE)
par(mfrow = c(1, 2), mar = c(10, 4, 0.5, 2.5), oma = c(1.5, 2, 1, 1))
barplot(Fatal.10$FATALITIES, names.arg = Fatal.10$GROUP.EVENT, ylab = "Fatalities", las = 3)
barplot(Injur.10$INJURUES, names.arg = Injur.10$GROUP.EVENT, ylab = "Injuries", las = 3)
barplot(Injur.10$INJURIES, names.arg = Injur.10$GROUP.EVENT, ylab = "Injuries", las = 3)
title(main = "Impacts of weather events on population health", outer = TRUE)
View(Prop.10)
par(mfrow = c(1, 2), mar = c(10, 4, 0.5, 2.5), oma = c(1.5, 2, 1, 1))
barplot(Prop.10$Prop.Damage, names.arg = Prop.10$GROUP.EVENT, ylab = "Fatalities", las = 3)
barplot(Crop.10$Crop.Damage, names.arg = Crop.10$GROUP.EVENT, ylab = "Injuries", las = 3)
title(main = "Impacts of weather events on economy", outer = TRUE)
par(mfrow = c(1, 2), mar = c(10, 4, 0.5, 2.5), oma = c(1.5, 2, 1, 1))
barplot(Prop.10$Prop.Damage/1000000, names.arg = Prop.10$GROUP.EVENT, ylab = "Looses on properties (US Million dollars)", las = 3)
barplot(Crop.10$Crop.Damage/1000000, names.arg = Crop.10$GROUP.EVENT, ylab = "Looses on crops (US Million dollars)", las = 3)
title(main = "Impacts of weather events on economy", outer = TRUE)
